// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CHUNK_BLOCKS_FBS_H_
#define FLATBUFFERS_GENERATED_CHUNK_BLOCKS_FBS_H_

#include "flatbuffers/flatbuffers.h"


namespace blocks {
namespace fbs {

struct Pos;
struct Block;
struct Chunk;

MANUALLY_ALIGNED_STRUCT(8) Pos FLATBUFFERS_FINAL_CLASS {
 private:
  int64_t x_;
  int64_t y_;
  int64_t z_;

 public:
  Pos(int64_t x, int64_t y, int64_t z)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)), z_(flatbuffers::EndianScalar(z)) { }

  int64_t x() const { return flatbuffers::EndianScalar(x_); }
  void mutate_x(int64_t x) { flatbuffers::WriteScalar(&x_, x); }
  int64_t y() const { return flatbuffers::EndianScalar(y_); }
  void mutate_y(int64_t y) { flatbuffers::WriteScalar(&y_, y); }
  int64_t z() const { return flatbuffers::EndianScalar(z_); }
  void mutate_z(int64_t z) { flatbuffers::WriteScalar(&z_, z); }
};
STRUCT_END(Pos, 24);

struct Block FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint16_t id() const { return GetField<uint16_t>(4, 0); }
  bool mutate_id(uint16_t id) { return SetField(4, id); }
  uint16_t variant() const { return GetField<uint16_t>(6, 0); }
  bool mutate_variant(uint16_t variant) { return SetField(6, variant); }
  uint8_t air() const { return GetField<uint8_t>(8, 0); }
  bool mutate_air(uint8_t air) { return SetField(8, air); }
  uint8_t transparent() const { return GetField<uint8_t>(10, 0); }
  bool mutate_transparent(uint8_t transparent) { return SetField(10, transparent); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* id */) &&
           VerifyField<uint16_t>(verifier, 6 /* variant */) &&
           VerifyField<uint8_t>(verifier, 8 /* air */) &&
           VerifyField<uint8_t>(verifier, 10 /* transparent */) &&
           verifier.EndTable();
  }
};

struct BlockBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint16_t id) { fbb_.AddElement<uint16_t>(4, id, 0); }
  void add_variant(uint16_t variant) { fbb_.AddElement<uint16_t>(6, variant, 0); }
  void add_air(uint8_t air) { fbb_.AddElement<uint8_t>(8, air, 0); }
  void add_transparent(uint8_t transparent) { fbb_.AddElement<uint8_t>(10, transparent, 0); }
  BlockBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  BlockBuilder &operator=(const BlockBuilder &);
  flatbuffers::Offset<Block> Finish() {
    auto o = flatbuffers::Offset<Block>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<Block> CreateBlock(flatbuffers::FlatBufferBuilder &_fbb,
   uint16_t id = 0,
   uint16_t variant = 0,
   uint8_t air = 0,
   uint8_t transparent = 0) {
  BlockBuilder builder_(_fbb);
  builder_.add_variant(variant);
  builder_.add_id(id);
  builder_.add_transparent(transparent);
  builder_.add_air(air);
  return builder_.Finish();
}

struct Chunk FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t version() const { return GetField<uint8_t>(4, 0); }
  bool mutate_version(uint8_t version) { return SetField(4, version); }
  uint8_t size() const { return GetField<uint8_t>(6, 0); }
  bool mutate_size(uint8_t size) { return SetField(6, size); }
  const Pos *cid() const { return GetStruct<const Pos *>(8); }
  Pos *mutable_cid() { return GetStruct<Pos *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<Block>> *blocks() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Block>> *>(10); }
  flatbuffers::Vector<flatbuffers::Offset<Block>> *mutable_blocks() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<Block>> *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* version */) &&
           VerifyField<uint8_t>(verifier, 6 /* size */) &&
           VerifyFieldRequired<Pos>(verifier, 8 /* cid */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* blocks */) &&
           verifier.Verify(blocks()) &&
           verifier.VerifyVectorOfTables(blocks()) &&
           verifier.EndTable();
  }
};

struct ChunkBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint8_t version) { fbb_.AddElement<uint8_t>(4, version, 0); }
  void add_size(uint8_t size) { fbb_.AddElement<uint8_t>(6, size, 0); }
  void add_cid(const Pos *cid) { fbb_.AddStruct(8, cid); }
  void add_blocks(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Block>>> blocks) { fbb_.AddOffset(10, blocks); }
  ChunkBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ChunkBuilder &operator=(const ChunkBuilder &);
  flatbuffers::Offset<Chunk> Finish() {
    auto o = flatbuffers::Offset<Chunk>(fbb_.EndTable(start_, 4));
    fbb_.Required(o, 8);  // cid
    return o;
  }
};

inline flatbuffers::Offset<Chunk> CreateChunk(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t version = 0,
   uint8_t size = 0,
   const Pos *cid = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Block>>> blocks = 0) {
  ChunkBuilder builder_(_fbb);
  builder_.add_blocks(blocks);
  builder_.add_cid(cid);
  builder_.add_size(size);
  builder_.add_version(version);
  return builder_.Finish();
}

}  // namespace fbs
}  // namespace blocks

#endif  // FLATBUFFERS_GENERATED_CHUNK_BLOCKS_FBS_H_
